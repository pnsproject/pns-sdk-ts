/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "MinimalForwarderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalForwarderUpgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC2771Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2771Context__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "EchidnaHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EchidnaHelper__factory>;
    getContractFactory(
      name: "EchidnaInit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EchidnaInit__factory>;
    getContractFactory(
      name: "IHEVM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHEVM__factory>;
    getContractFactory(
      name: "TestPNS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPNS__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "MacroNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MacroNFT__factory>;
    getContractFactory(
      name: "IController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IController__factory>;
    getContractFactory(
      name: "IMulticallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticallable__factory>;
    getContractFactory(
      name: "IPNS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPNS__factory>;
    getContractFactory(
      name: "IResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IResolver__factory>;
    getContractFactory(
      name: "PNS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PNS__factory>;
    getContractFactory(
      name: "Controller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controller__factory>;
    getContractFactory(
      name: "PNSForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PNSForwarder__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "ERC2771ContextUpgradeableNoGap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2771ContextUpgradeableNoGap__factory>;
    getContractFactory(
      name: "IManagerOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IManagerOwnable__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "ManagerOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ManagerOwnable__factory>;
    getContractFactory(
      name: "ManagerOwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ManagerOwnableUpgradeable__factory>;
    getContractFactory(
      name: "RootOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RootOwnable__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "MinimalForwarderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalForwarderUpgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC2771Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2771Context>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "EchidnaHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EchidnaHelper>;
    getContractAt(
      name: "EchidnaInit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EchidnaInit>;
    getContractAt(
      name: "IHEVM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHEVM>;
    getContractAt(
      name: "TestPNS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPNS>;
    getContractAt(
      name: "Greeter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Greeter>;
    getContractAt(
      name: "MacroNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MacroNFT>;
    getContractAt(
      name: "IController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IController>;
    getContractAt(
      name: "IMulticallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticallable>;
    getContractAt(
      name: "IPNS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPNS>;
    getContractAt(
      name: "IResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IResolver>;
    getContractAt(
      name: "PNS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PNS>;
    getContractAt(
      name: "Controller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controller>;
    getContractAt(
      name: "PNSForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PNSForwarder>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "ERC2771ContextUpgradeableNoGap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2771ContextUpgradeableNoGap>;
    getContractAt(
      name: "IManagerOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IManagerOwnable>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "ManagerOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ManagerOwnable>;
    getContractAt(
      name: "ManagerOwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ManagerOwnableUpgradeable>;
    getContractAt(
      name: "RootOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RootOwnable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
