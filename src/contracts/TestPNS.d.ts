/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestPNSInterface extends ethers.utils.Interface {
  functions: {
    "aop_nft_approval_all(bool,uint8,bool)": FunctionFragment;
    "aop_nft_approve(bool,uint8,uint8)": FunctionFragment;
    "aop_nft_set_owner(bool,uint8)": FunctionFragment;
    "aop_nft_transfer(bool,uint8,uint8)": FunctionFragment;
    "aop_pns_approve(uint8,uint8)": FunctionFragment;
    "aop_pns_safeTransferFrom(uint8,uint8)": FunctionFragment;
    "aop_set_price(bool,int128)": FunctionFragment;
    "chk_p_register(string,address,uint64,uint256)": FunctionFragment;
    "chk_p_renew(uint8,uint256,uint64)": FunctionFragment;
    "op_c_nameRedeem((bool,uint8,string,uint8,address,uint8,uint64,uint8,uint256,uint8,bytes,uint8,uint8,uint8,uint8,uint8,uint8,uint8))": FunctionFragment;
    "op_c_nameRegister(bool,uint8,string,uint8,address,uint8,uint64,uint8,uint256)": FunctionFragment;
    "op_c_nameRegisterByManager(bool,uint8,string,uint8,address,uint32,bool,uint256[],uint8[],string[])": FunctionFragment;
    "op_c_nameRegisterWithConfig((bool,uint8,string,uint8,address,uint8,uint64,uint8,uint256,bool,uint256[],uint8[],uint8,string[]))": FunctionFragment;
    "op_c_renew((bool,uint8,string,uint64,uint8,uint256))": FunctionFragment;
    "op_c_renewByManager(bool,uint8,uint64)": FunctionFragment;
    "op_c_setContractConfig(bool,uint8,uint8,uint8,uint8,uint32,bool)": FunctionFragment;
    "op_c_setManager(bool,uint8,bool)": FunctionFragment;
    "op_c_setPrice(bool,uint24[],uint24[],uint8,uint8)": FunctionFragment;
    "op_c_transferRootOwnership(bool,uint8,address)": FunctionFragment;
    "op_p_addKeys(uint8[],string[])": FunctionFragment;
    "op_p_bound(uint8,uint256)": FunctionFragment;
    "op_p_burn(uint8,uint256)": FunctionFragment;
    "op_p_mint(uint8,uint8)": FunctionFragment;
    "op_p_mintSubdomain(uint8,address,uint8,uint256,uint8,string)": FunctionFragment;
    "op_p_setByHash(uint8,uint256,string,uint8,uint256)": FunctionFragment;
    "op_p_setContractConfig(uint8)": FunctionFragment;
    "op_p_setManager(uint8,bool)": FunctionFragment;
    "op_p_setManyByHash(uint8[],uint256[],uint8,string[],uint8,uint256)": FunctionFragment;
    "op_p_setMetadataBatch(tuple[])": FunctionFragment;
    "op_p_setName(uint8,address,uint8,uint256)": FunctionFragment;
    "op_p_setNftName(uint8,address,uint8,uint256,uint8,uint256)": FunctionFragment;
    "op_p_setlink(uint8,uint256,uint256,uint256)": FunctionFragment;
    "op_p_setlinks(uint8,uint256,uint256[],uint8,uint256[])": FunctionFragment;
    "op_p_transferRootOwnership(uint8,address)": FunctionFragment;
    "st_c_renewPrice(bool,string,uint64)": FunctionFragment;
    "st_c_totalRegisterPrice(bool,string,uint64)": FunctionFragment;
    "st_p_available(uint8,uint256)": FunctionFragment;
    "st_p_bounded(uint8,uint256)": FunctionFragment;
    "st_p_getName(uint8,address)": FunctionFragment;
    "st_p_nameExpired(uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aop_nft_approval_all",
    values: [boolean, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "aop_nft_approve",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aop_nft_set_owner",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aop_nft_transfer",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aop_pns_approve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aop_pns_safeTransferFrom",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aop_set_price",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chk_p_register",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chk_p_renew",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_nameRedeem",
    values: [
      {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        dl_idx: BigNumberish;
        dl1: BigNumberish;
        c_idx: BigNumberish;
        c1: BytesLike;
        c_name_idx: BigNumberish;
        c_to_idx: BigNumberish;
        c_dur_idx: BigNumberish;
        c_dl_idx: BigNumberish;
        c_chainid_idx: BigNumberish;
        c_caddr_idx: BigNumberish;
        c_sign_idx: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_nameRegister",
    values: [
      boolean,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_nameRegisterByManager",
    values: [
      boolean,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish[],
      BigNumberish[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_nameRegisterWithConfig",
    values: [
      {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
        set_name: boolean;
        khs1: BigNumberish[];
        khs_idx: BigNumberish[];
        vls_idx: BigNumberish;
        vls1: string[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_renew",
    values: [
      {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        dur: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_renewByManager",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_setContractConfig",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_setManager",
    values: [boolean, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_setPrice",
    values: [
      boolean,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_c_transferRootOwnership",
    values: [boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_addKeys",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_bound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_burn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_mint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_mintSubdomain",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setByHash",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setContractConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setManager",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setManyByHash",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      string[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setMetadataBatch",
    values: [
      {
        tok_idx: BigNumberish;
        origin_idx: BigNumberish;
        expire1: BigNumberish;
        parent_idx: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setName",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setNftName",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setlink",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_setlinks",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "op_p_transferRootOwnership",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "st_c_renewPrice",
    values: [boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "st_c_totalRegisterPrice",
    values: [boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "st_p_available",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "st_p_bounded",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "st_p_getName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "st_p_nameExpired",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "aop_nft_approval_all",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aop_nft_approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aop_nft_set_owner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aop_nft_transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aop_pns_approve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aop_pns_safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aop_set_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chk_p_register",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chk_p_renew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_c_nameRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_c_nameRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_c_nameRegisterByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_c_nameRegisterWithConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "op_c_renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "op_c_renewByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_c_setContractConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_c_setManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_c_setPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_c_transferRootOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_addKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "op_p_bound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "op_p_burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "op_p_mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "op_p_mintSubdomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setContractConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setManyByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setMetadataBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setNftName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setlink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_setlinks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "op_p_transferRootOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "st_c_renewPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "st_c_totalRegisterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "st_p_available",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "st_p_bounded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "st_p_getName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "st_p_nameExpired",
    data: BytesLike
  ): Result;

  events: {
    "AssertionFailed(string)": EventFragment;
    "Debug(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssertionFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Debug"): EventFragment;
}

export type AssertionFailedEvent = TypedEvent<[string] & { message: string }>;

export type DebugEvent = TypedEvent<[string] & { m: string }>;

export class TestPNS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestPNSInterface;

  functions: {
    aop_nft_approval_all(
      idx_idx: boolean,
      op_idx: BigNumberish,
      v: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aop_nft_approve(
      idx_idx: boolean,
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aop_nft_set_owner(
      idx: boolean,
      owner_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aop_nft_transfer(
      idx: boolean,
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aop_pns_approve(
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aop_pns_safeTransferFrom(
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aop_set_price(
      idx: boolean,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chk_p_register(
      name: string,
      to: string,
      dur: BigNumberish,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chk_p_renew(
      id_idx: BigNumberish,
      id1: BigNumberish,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_nameRedeem(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        dl_idx: BigNumberish;
        dl1: BigNumberish;
        c_idx: BigNumberish;
        c1: BytesLike;
        c_name_idx: BigNumberish;
        c_to_idx: BigNumberish;
        c_dur_idx: BigNumberish;
        c_dl_idx: BigNumberish;
        c_chainid_idx: BigNumberish;
        c_caddr_idx: BigNumberish;
        c_sign_idx: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_nameRegister(
      idx_idx: boolean,
      name_idx: BigNumberish,
      name1: string,
      to_idx: BigNumberish,
      to1: string,
      dur_idx: BigNumberish,
      dur1: BigNumberish,
      value_idx: BigNumberish,
      value1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_nameRegisterByManager(
      idx_idx: boolean,
      name_idx: BigNumberish,
      name1: string,
      to_idx: BigNumberish,
      to1: string,
      dur1: BigNumberish,
      set_name: boolean,
      khs1: BigNumberish[],
      khs_idx: BigNumberish[],
      vls1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_nameRegisterWithConfig(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
        set_name: boolean;
        khs1: BigNumberish[];
        khs_idx: BigNumberish[];
        vls_idx: BigNumberish;
        vls1: string[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_renew(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        dur: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_renewByManager(
      idx_idx: boolean,
      name_idx: BigNumberish,
      dur1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_setContractConfig(
      idx: boolean,
      fl_b0: BigNumberish,
      fl_b1: BigNumberish,
      fl_b2: BigNumberish,
      ml: BigNumberish,
      md: BigNumberish,
      pf: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_setManager(
      idx: boolean,
      fix_m: BigNumberish,
      p_b: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_setPrice(
      idx: boolean,
      bpl: BigNumberish[],
      rpl: BigNumberish[],
      bpl_min: BigNumberish,
      rpl_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_c_transferRootOwnership(
      idx: boolean,
      fix_r: BigNumberish,
      p_r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_addKeys(
      keys_idx: BigNumberish[],
      keys1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_bound(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_burn(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_mint(
      to: BigNumberish,
      tok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_mintSubdomain(
      to_idx: BigNumberish,
      to1: string,
      ptok_idx: BigNumberish,
      ptok1: BigNumberish,
      name_idx: BigNumberish,
      name1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setByHash(
      h_idx: BigNumberish,
      h1: BigNumberish,
      v: string,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setContractConfig(
      w: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setManager(
      fix_m: BigNumberish,
      p_b: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setManyByHash(
      hs_idx: BigNumberish[],
      hs1: BigNumberish[],
      vs_idx: BigNumberish,
      vs1: string[],
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setMetadataBatch(
      args: {
        tok_idx: BigNumberish;
        origin_idx: BigNumberish;
        expire1: BigNumberish;
        parent_idx: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setName(
      addr_idx: BigNumberish,
      addr1: string,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setNftName(
      naddr_idx: BigNumberish,
      naddr1: string,
      nid_idx: BigNumberish,
      nid1: BigNumberish,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setlink(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      tgt: BigNumberish,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_setlinks(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      tgts1: BigNumberish[],
      vs_idx: BigNumberish,
      vs1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    op_p_transferRootOwnership(
      fix_r: BigNumberish,
      p_r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    st_c_renewPrice(
      idx_idx: boolean,
      name: string,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    st_c_totalRegisterPrice(
      idx_idx: boolean,
      name: string,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    st_p_available(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    st_p_bounded(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    st_p_getName(
      addr_idx: BigNumberish,
      addr1: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    st_p_nameExpired(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aop_nft_approval_all(
    idx_idx: boolean,
    op_idx: BigNumberish,
    v: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aop_nft_approve(
    idx_idx: boolean,
    to_idx: BigNumberish,
    tok_idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aop_nft_set_owner(
    idx: boolean,
    owner_idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aop_nft_transfer(
    idx: boolean,
    to_idx: BigNumberish,
    tok_idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aop_pns_approve(
    to_idx: BigNumberish,
    tok_idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aop_pns_safeTransferFrom(
    to_idx: BigNumberish,
    tok_idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aop_set_price(
    idx: boolean,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chk_p_register(
    name: string,
    to: string,
    dur: BigNumberish,
    base: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chk_p_renew(
    id_idx: BigNumberish,
    id1: BigNumberish,
    dur: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_nameRedeem(
    fa: {
      idx_idx: boolean;
      name_idx: BigNumberish;
      name1: string;
      to_idx: BigNumberish;
      to1: string;
      dur_idx: BigNumberish;
      dur1: BigNumberish;
      dl_idx: BigNumberish;
      dl1: BigNumberish;
      c_idx: BigNumberish;
      c1: BytesLike;
      c_name_idx: BigNumberish;
      c_to_idx: BigNumberish;
      c_dur_idx: BigNumberish;
      c_dl_idx: BigNumberish;
      c_chainid_idx: BigNumberish;
      c_caddr_idx: BigNumberish;
      c_sign_idx: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_nameRegister(
    idx_idx: boolean,
    name_idx: BigNumberish,
    name1: string,
    to_idx: BigNumberish,
    to1: string,
    dur_idx: BigNumberish,
    dur1: BigNumberish,
    value_idx: BigNumberish,
    value1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_nameRegisterByManager(
    idx_idx: boolean,
    name_idx: BigNumberish,
    name1: string,
    to_idx: BigNumberish,
    to1: string,
    dur1: BigNumberish,
    set_name: boolean,
    khs1: BigNumberish[],
    khs_idx: BigNumberish[],
    vls1: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_nameRegisterWithConfig(
    fa: {
      idx_idx: boolean;
      name_idx: BigNumberish;
      name1: string;
      to_idx: BigNumberish;
      to1: string;
      dur_idx: BigNumberish;
      dur1: BigNumberish;
      value_idx: BigNumberish;
      value1: BigNumberish;
      set_name: boolean;
      khs1: BigNumberish[];
      khs_idx: BigNumberish[];
      vls_idx: BigNumberish;
      vls1: string[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_renew(
    fa: {
      idx_idx: boolean;
      name_idx: BigNumberish;
      name1: string;
      dur: BigNumberish;
      value_idx: BigNumberish;
      value1: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_renewByManager(
    idx_idx: boolean,
    name_idx: BigNumberish,
    dur1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_setContractConfig(
    idx: boolean,
    fl_b0: BigNumberish,
    fl_b1: BigNumberish,
    fl_b2: BigNumberish,
    ml: BigNumberish,
    md: BigNumberish,
    pf: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_setManager(
    idx: boolean,
    fix_m: BigNumberish,
    p_b: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_setPrice(
    idx: boolean,
    bpl: BigNumberish[],
    rpl: BigNumberish[],
    bpl_min: BigNumberish,
    rpl_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_c_transferRootOwnership(
    idx: boolean,
    fix_r: BigNumberish,
    p_r: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_addKeys(
    keys_idx: BigNumberish[],
    keys1: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_bound(
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_burn(
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_mint(
    to: BigNumberish,
    tok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_mintSubdomain(
    to_idx: BigNumberish,
    to1: string,
    ptok_idx: BigNumberish,
    ptok1: BigNumberish,
    name_idx: BigNumberish,
    name1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setByHash(
    h_idx: BigNumberish,
    h1: BigNumberish,
    v: string,
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setContractConfig(
    w: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setManager(
    fix_m: BigNumberish,
    p_b: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setManyByHash(
    hs_idx: BigNumberish[],
    hs1: BigNumberish[],
    vs_idx: BigNumberish,
    vs1: string[],
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setMetadataBatch(
    args: {
      tok_idx: BigNumberish;
      origin_idx: BigNumberish;
      expire1: BigNumberish;
      parent_idx: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setName(
    addr_idx: BigNumberish,
    addr1: string,
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setNftName(
    naddr_idx: BigNumberish,
    naddr1: string,
    nid_idx: BigNumberish,
    nid1: BigNumberish,
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setlink(
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    tgt: BigNumberish,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_setlinks(
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    tgts1: BigNumberish[],
    vs_idx: BigNumberish,
    vs1: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  op_p_transferRootOwnership(
    fix_r: BigNumberish,
    p_r: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  st_c_renewPrice(
    idx_idx: boolean,
    name: string,
    dur: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  st_c_totalRegisterPrice(
    idx_idx: boolean,
    name: string,
    dur: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  st_p_available(
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  st_p_bounded(
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  st_p_getName(
    addr_idx: BigNumberish,
    addr1: string,
    overrides?: CallOverrides
  ): Promise<void>;

  st_p_nameExpired(
    tok_idx: BigNumberish,
    tok1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aop_nft_approval_all(
      idx_idx: boolean,
      op_idx: BigNumberish,
      v: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    aop_nft_approve(
      idx_idx: boolean,
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    aop_nft_set_owner(
      idx: boolean,
      owner_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    aop_nft_transfer(
      idx: boolean,
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    aop_pns_approve(
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    aop_pns_safeTransferFrom(
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    aop_set_price(
      idx: boolean,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chk_p_register(
      name: string,
      to: string,
      dur: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chk_p_renew(
      id_idx: BigNumberish,
      id1: BigNumberish,
      dur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_nameRedeem(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        dl_idx: BigNumberish;
        dl1: BigNumberish;
        c_idx: BigNumberish;
        c1: BytesLike;
        c_name_idx: BigNumberish;
        c_to_idx: BigNumberish;
        c_dur_idx: BigNumberish;
        c_dl_idx: BigNumberish;
        c_chainid_idx: BigNumberish;
        c_caddr_idx: BigNumberish;
        c_sign_idx: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_nameRegister(
      idx_idx: boolean,
      name_idx: BigNumberish,
      name1: string,
      to_idx: BigNumberish,
      to1: string,
      dur_idx: BigNumberish,
      dur1: BigNumberish,
      value_idx: BigNumberish,
      value1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_nameRegisterByManager(
      idx_idx: boolean,
      name_idx: BigNumberish,
      name1: string,
      to_idx: BigNumberish,
      to1: string,
      dur1: BigNumberish,
      set_name: boolean,
      khs1: BigNumberish[],
      khs_idx: BigNumberish[],
      vls1: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_nameRegisterWithConfig(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
        set_name: boolean;
        khs1: BigNumberish[];
        khs_idx: BigNumberish[];
        vls_idx: BigNumberish;
        vls1: string[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_renew(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        dur: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_renewByManager(
      idx_idx: boolean,
      name_idx: BigNumberish,
      dur1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_setContractConfig(
      idx: boolean,
      fl_b0: BigNumberish,
      fl_b1: BigNumberish,
      fl_b2: BigNumberish,
      ml: BigNumberish,
      md: BigNumberish,
      pf: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_setManager(
      idx: boolean,
      fix_m: BigNumberish,
      p_b: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_setPrice(
      idx: boolean,
      bpl: BigNumberish[],
      rpl: BigNumberish[],
      bpl_min: BigNumberish,
      rpl_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_c_transferRootOwnership(
      idx: boolean,
      fix_r: BigNumberish,
      p_r: string,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_addKeys(
      keys_idx: BigNumberish[],
      keys1: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_bound(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_burn(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_mint(
      to: BigNumberish,
      tok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_mintSubdomain(
      to_idx: BigNumberish,
      to1: string,
      ptok_idx: BigNumberish,
      ptok1: BigNumberish,
      name_idx: BigNumberish,
      name1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setByHash(
      h_idx: BigNumberish,
      h1: BigNumberish,
      v: string,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setContractConfig(
      w: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setManager(
      fix_m: BigNumberish,
      p_b: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setManyByHash(
      hs_idx: BigNumberish[],
      hs1: BigNumberish[],
      vs_idx: BigNumberish,
      vs1: string[],
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setMetadataBatch(
      args: {
        tok_idx: BigNumberish;
        origin_idx: BigNumberish;
        expire1: BigNumberish;
        parent_idx: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setName(
      addr_idx: BigNumberish,
      addr1: string,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setNftName(
      naddr_idx: BigNumberish,
      naddr1: string,
      nid_idx: BigNumberish,
      nid1: BigNumberish,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setlink(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      tgt: BigNumberish,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_setlinks(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      tgts1: BigNumberish[],
      vs_idx: BigNumberish,
      vs1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    op_p_transferRootOwnership(
      fix_r: BigNumberish,
      p_r: string,
      overrides?: CallOverrides
    ): Promise<void>;

    st_c_renewPrice(
      idx_idx: boolean,
      name: string,
      dur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    st_c_totalRegisterPrice(
      idx_idx: boolean,
      name: string,
      dur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    st_p_available(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    st_p_bounded(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    st_p_getName(
      addr_idx: BigNumberish,
      addr1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    st_p_nameExpired(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssertionFailed(string)"(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    AssertionFailed(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    "Debug(string)"(m?: null): TypedEventFilter<[string], { m: string }>;

    Debug(m?: null): TypedEventFilter<[string], { m: string }>;
  };

  estimateGas: {
    aop_nft_approval_all(
      idx_idx: boolean,
      op_idx: BigNumberish,
      v: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aop_nft_approve(
      idx_idx: boolean,
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aop_nft_set_owner(
      idx: boolean,
      owner_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aop_nft_transfer(
      idx: boolean,
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aop_pns_approve(
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aop_pns_safeTransferFrom(
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aop_set_price(
      idx: boolean,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chk_p_register(
      name: string,
      to: string,
      dur: BigNumberish,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chk_p_renew(
      id_idx: BigNumberish,
      id1: BigNumberish,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_nameRedeem(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        dl_idx: BigNumberish;
        dl1: BigNumberish;
        c_idx: BigNumberish;
        c1: BytesLike;
        c_name_idx: BigNumberish;
        c_to_idx: BigNumberish;
        c_dur_idx: BigNumberish;
        c_dl_idx: BigNumberish;
        c_chainid_idx: BigNumberish;
        c_caddr_idx: BigNumberish;
        c_sign_idx: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_nameRegister(
      idx_idx: boolean,
      name_idx: BigNumberish,
      name1: string,
      to_idx: BigNumberish,
      to1: string,
      dur_idx: BigNumberish,
      dur1: BigNumberish,
      value_idx: BigNumberish,
      value1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_nameRegisterByManager(
      idx_idx: boolean,
      name_idx: BigNumberish,
      name1: string,
      to_idx: BigNumberish,
      to1: string,
      dur1: BigNumberish,
      set_name: boolean,
      khs1: BigNumberish[],
      khs_idx: BigNumberish[],
      vls1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_nameRegisterWithConfig(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
        set_name: boolean;
        khs1: BigNumberish[];
        khs_idx: BigNumberish[];
        vls_idx: BigNumberish;
        vls1: string[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_renew(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        dur: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_renewByManager(
      idx_idx: boolean,
      name_idx: BigNumberish,
      dur1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_setContractConfig(
      idx: boolean,
      fl_b0: BigNumberish,
      fl_b1: BigNumberish,
      fl_b2: BigNumberish,
      ml: BigNumberish,
      md: BigNumberish,
      pf: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_setManager(
      idx: boolean,
      fix_m: BigNumberish,
      p_b: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_setPrice(
      idx: boolean,
      bpl: BigNumberish[],
      rpl: BigNumberish[],
      bpl_min: BigNumberish,
      rpl_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_c_transferRootOwnership(
      idx: boolean,
      fix_r: BigNumberish,
      p_r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_addKeys(
      keys_idx: BigNumberish[],
      keys1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_bound(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_burn(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_mint(
      to: BigNumberish,
      tok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_mintSubdomain(
      to_idx: BigNumberish,
      to1: string,
      ptok_idx: BigNumberish,
      ptok1: BigNumberish,
      name_idx: BigNumberish,
      name1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setByHash(
      h_idx: BigNumberish,
      h1: BigNumberish,
      v: string,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setContractConfig(
      w: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setManager(
      fix_m: BigNumberish,
      p_b: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setManyByHash(
      hs_idx: BigNumberish[],
      hs1: BigNumberish[],
      vs_idx: BigNumberish,
      vs1: string[],
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setMetadataBatch(
      args: {
        tok_idx: BigNumberish;
        origin_idx: BigNumberish;
        expire1: BigNumberish;
        parent_idx: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setName(
      addr_idx: BigNumberish,
      addr1: string,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setNftName(
      naddr_idx: BigNumberish,
      naddr1: string,
      nid_idx: BigNumberish,
      nid1: BigNumberish,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setlink(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      tgt: BigNumberish,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_setlinks(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      tgts1: BigNumberish[],
      vs_idx: BigNumberish,
      vs1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    op_p_transferRootOwnership(
      fix_r: BigNumberish,
      p_r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    st_c_renewPrice(
      idx_idx: boolean,
      name: string,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    st_c_totalRegisterPrice(
      idx_idx: boolean,
      name: string,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    st_p_available(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    st_p_bounded(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    st_p_getName(
      addr_idx: BigNumberish,
      addr1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    st_p_nameExpired(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aop_nft_approval_all(
      idx_idx: boolean,
      op_idx: BigNumberish,
      v: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aop_nft_approve(
      idx_idx: boolean,
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aop_nft_set_owner(
      idx: boolean,
      owner_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aop_nft_transfer(
      idx: boolean,
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aop_pns_approve(
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aop_pns_safeTransferFrom(
      to_idx: BigNumberish,
      tok_idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aop_set_price(
      idx: boolean,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chk_p_register(
      name: string,
      to: string,
      dur: BigNumberish,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chk_p_renew(
      id_idx: BigNumberish,
      id1: BigNumberish,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_nameRedeem(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        dl_idx: BigNumberish;
        dl1: BigNumberish;
        c_idx: BigNumberish;
        c1: BytesLike;
        c_name_idx: BigNumberish;
        c_to_idx: BigNumberish;
        c_dur_idx: BigNumberish;
        c_dl_idx: BigNumberish;
        c_chainid_idx: BigNumberish;
        c_caddr_idx: BigNumberish;
        c_sign_idx: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_nameRegister(
      idx_idx: boolean,
      name_idx: BigNumberish,
      name1: string,
      to_idx: BigNumberish,
      to1: string,
      dur_idx: BigNumberish,
      dur1: BigNumberish,
      value_idx: BigNumberish,
      value1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_nameRegisterByManager(
      idx_idx: boolean,
      name_idx: BigNumberish,
      name1: string,
      to_idx: BigNumberish,
      to1: string,
      dur1: BigNumberish,
      set_name: boolean,
      khs1: BigNumberish[],
      khs_idx: BigNumberish[],
      vls1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_nameRegisterWithConfig(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        to_idx: BigNumberish;
        to1: string;
        dur_idx: BigNumberish;
        dur1: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
        set_name: boolean;
        khs1: BigNumberish[];
        khs_idx: BigNumberish[];
        vls_idx: BigNumberish;
        vls1: string[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_renew(
      fa: {
        idx_idx: boolean;
        name_idx: BigNumberish;
        name1: string;
        dur: BigNumberish;
        value_idx: BigNumberish;
        value1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_renewByManager(
      idx_idx: boolean,
      name_idx: BigNumberish,
      dur1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_setContractConfig(
      idx: boolean,
      fl_b0: BigNumberish,
      fl_b1: BigNumberish,
      fl_b2: BigNumberish,
      ml: BigNumberish,
      md: BigNumberish,
      pf: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_setManager(
      idx: boolean,
      fix_m: BigNumberish,
      p_b: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_setPrice(
      idx: boolean,
      bpl: BigNumberish[],
      rpl: BigNumberish[],
      bpl_min: BigNumberish,
      rpl_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_c_transferRootOwnership(
      idx: boolean,
      fix_r: BigNumberish,
      p_r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_addKeys(
      keys_idx: BigNumberish[],
      keys1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_bound(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_burn(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_mint(
      to: BigNumberish,
      tok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_mintSubdomain(
      to_idx: BigNumberish,
      to1: string,
      ptok_idx: BigNumberish,
      ptok1: BigNumberish,
      name_idx: BigNumberish,
      name1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setByHash(
      h_idx: BigNumberish,
      h1: BigNumberish,
      v: string,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setContractConfig(
      w: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setManager(
      fix_m: BigNumberish,
      p_b: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setManyByHash(
      hs_idx: BigNumberish[],
      hs1: BigNumberish[],
      vs_idx: BigNumberish,
      vs1: string[],
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setMetadataBatch(
      args: {
        tok_idx: BigNumberish;
        origin_idx: BigNumberish;
        expire1: BigNumberish;
        parent_idx: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setName(
      addr_idx: BigNumberish,
      addr1: string,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setNftName(
      naddr_idx: BigNumberish,
      naddr1: string,
      nid_idx: BigNumberish,
      nid1: BigNumberish,
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setlink(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      tgt: BigNumberish,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_setlinks(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      tgts1: BigNumberish[],
      vs_idx: BigNumberish,
      vs1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    op_p_transferRootOwnership(
      fix_r: BigNumberish,
      p_r: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    st_c_renewPrice(
      idx_idx: boolean,
      name: string,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    st_c_totalRegisterPrice(
      idx_idx: boolean,
      name: string,
      dur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    st_p_available(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    st_p_bounded(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    st_p_getName(
      addr_idx: BigNumberish,
      addr1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    st_p_nameExpired(
      tok_idx: BigNumberish,
      tok1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
