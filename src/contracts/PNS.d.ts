/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PNSInterface extends ethers.utils.Interface {
  functions: {
    "FLAGS()": FunctionFragment;
    "GRACE_PERIOD()": FunctionFragment;
    "_root()": FunctionFragment;
    "addKeys(string[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "available(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bound(uint256)": FunctionFragment;
    "bounded(uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "expire(uint256)": FunctionFragment;
    "get(string,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getByHash(uint256,uint256)": FunctionFragment;
    "getKey(uint256)": FunctionFragment;
    "getMany(string[],uint256)": FunctionFragment;
    "getManyByHash(uint256[],uint256)": FunctionFragment;
    "getName(address)": FunctionFragment;
    "getNameUnchecked(address)": FunctionFragment;
    "getNftName(address,uint256)": FunctionFragment;
    "getlink(uint256,uint256)": FunctionFragment;
    "getlinks(uint256,uint256[])": FunctionFragment;
    "initialize()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isApprovedOrOwner(address,uint256)": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintSubdomain(address,uint256,string)": FunctionFragment;
    "name()": FunctionFragment;
    "nameExpired(uint256)": FunctionFragment;
    "origin(uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "parent(uint256)": FunctionFragment;
    "register(string,address,uint64,uint256)": FunctionFragment;
    "renew(uint256,uint64)": FunctionFragment;
    "root()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setByHash(uint256,string,uint256)": FunctionFragment;
    "setContractConfig(uint256)": FunctionFragment;
    "setManager(address,bool)": FunctionFragment;
    "setManyByHash(uint256[],string[],uint256)": FunctionFragment;
    "setMetadataBatch(uint256[],tuple[])": FunctionFragment;
    "setName(address,uint256)": FunctionFragment;
    "setNftName(address,uint256,uint256)": FunctionFragment;
    "setlink(uint256,uint256,uint256)": FunctionFragment;
    "setlinks(uint256,uint256[],uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferRootOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FLAGS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_root", values?: undefined): string;
  encodeFunctionData(functionFragment: "addKeys", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "available",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "bound", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "bounded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expire",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getByHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMany",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManyByHash",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNameUnchecked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftName",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getlink",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getlinks",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedOrOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSubdomain",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nameExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "origin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setByHash",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setManyByHash",
    values: [BigNumberish[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataBatch",
    values: [
      BigNumberish[],
      { origin: BigNumberish; parent: BigNumberish; expire: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftName",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setlink",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setlinks",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRootOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "FLAGS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_root", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bounded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expire", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getManyByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNameUnchecked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNftName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getlink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getlinks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedOrOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSubdomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "origin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setByHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManyByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNftName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setlink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setlinks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRootOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ConfigUpdated(uint256)": EventFragment;
    "ManagerChanged(address,bool)": EventFragment;
    "MetadataUpdated(uint256[])": EventFragment;
    "NewKey(string,string)": EventFragment;
    "NewResolver(uint256,address)": EventFragment;
    "NewSubdomain(address,uint256,uint256,string)": EventFragment;
    "ResetRecords(uint256)": EventFragment;
    "RootOwnershipTransferred(address,address)": EventFragment;
    "Set(uint256,uint256,string)": EventFragment;
    "SetLink(uint256,uint256,uint256)": EventFragment;
    "SetName(address,uint256)": EventFragment;
    "SetNftName(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewResolver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSubdomain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetRecords"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type ConfigUpdatedEvent = TypedEvent<[BigNumber] & { flags: BigNumber }>;

export type ManagerChangedEvent = TypedEvent<
  [string, boolean] & { manager: string; role: boolean }
>;

export type MetadataUpdatedEvent = TypedEvent<
  [BigNumber[]] & { data: BigNumber[] }
>;

export type NewKeyEvent = TypedEvent<
  [string, string] & { keyIndex: string; key: string }
>;

export type NewResolverEvent = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; resolver: string }
>;

export type NewSubdomainEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    to: string;
    tokenId: BigNumber;
    subtokenId: BigNumber;
    name: string;
  }
>;

export type ResetRecordsEvent = TypedEvent<
  [BigNumber] & { tokenId: BigNumber }
>;

export type RootOwnershipTransferredEvent = TypedEvent<
  [string, string] & { oldRoot: string; newRoot: string }
>;

export type SetEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    tokenId: BigNumber;
    keyHash: BigNumber;
    value: string;
  }
>;

export type SetLinkEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    tokenId: BigNumber;
    keyHash: BigNumber;
    value: BigNumber;
  }
>;

export type SetNameEvent = TypedEvent<
  [string, BigNumber] & { addr: string; tokenId: BigNumber }
>;

export type SetNftNameEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    nftAddr: string;
    nftTokenId: BigNumber;
    tokenId: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class PNS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PNSInterface;

  functions: {
    FLAGS(overrides?: CallOverrides): Promise<[BigNumber]>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    _root(overrides?: CallOverrides): Promise<[string]>;

    addKeys(
      keys: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    available(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bound(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bounded(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    expire(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get(
      key: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getByHash(
      keyHash: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getMany(
      keys: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    getName(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    getNameUnchecked(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNftName(
      nftAddr: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getlink(
      source: BigNumberish,
      target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getlinks(
      source: BigNumberish,
      targets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { values: BigNumber[] }>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedOrOwner(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isManager(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: string,
      newTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintSubdomain(
      to: string,
      tokenId: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nameExpired(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    origin(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parent(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    register(
      name: string,
      to: string,
      duration: BigNumberish,
      baseNode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renew(
      id: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractConfig(
      _writable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      manager: string,
      role: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMetadataBatch(
      tokenIds: BigNumberish[],
      data: {
        origin: BigNumberish;
        parent: BigNumberish;
        expire: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setName(
      addr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftName(
      nftAddr: string,
      nftTokenId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setlink(
      source: BigNumberish,
      target: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setlinks(
      source: BigNumberish,
      targets: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferRootOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FLAGS(overrides?: CallOverrides): Promise<BigNumber>;

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  _root(overrides?: CallOverrides): Promise<string>;

  addKeys(
    keys: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  available(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  bound(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bounded(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  expire(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  get(
    key: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getByHash(
    keyHash: BigNumberish,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getMany(
    keys: string[],
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getManyByHash(
    keyHashes: BigNumberish[],
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getName(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNameUnchecked(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNftName(
    nftAddr: string,
    nftTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getlink(
    source: BigNumberish,
    target: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getlinks(
    source: BigNumberish,
    targets: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedOrOwner(
    addr: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isManager(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    newTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintSubdomain(
    to: string,
    tokenId: BigNumberish,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nameExpired(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  origin(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  parent(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  register(
    name: string,
    to: string,
    duration: BigNumberish,
    baseNode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renew(
    id: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setByHash(
    keyHash: BigNumberish,
    value: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractConfig(
    _writable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    manager: string,
    role: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManyByHash(
    keyHashes: BigNumberish[],
    values: string[],
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMetadataBatch(
    tokenIds: BigNumberish[],
    data: {
      origin: BigNumberish;
      parent: BigNumberish;
      expire: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setName(
    addr: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftName(
    nftAddr: string,
    nftTokenId: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setlink(
    source: BigNumberish,
    target: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setlinks(
    source: BigNumberish,
    targets: BigNumberish[],
    values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferRootOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FLAGS(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _root(overrides?: CallOverrides): Promise<string>;

    addKeys(keys: string[], overrides?: CallOverrides): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    available(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bound(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    bounded(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    expire(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(
      key: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getByHash(
      keyHash: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getMany(
      keys: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getName(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNameUnchecked(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftName(
      nftAddr: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getlink(
      source: BigNumberish,
      target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getlinks(
      source: BigNumberish,
      targets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedOrOwner(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isManager(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      newTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintSubdomain(
      to: string,
      tokenId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nameExpired(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    origin(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    parent(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      name: string,
      to: string,
      duration: BigNumberish,
      baseNode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renew(
      id: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractConfig(
      _writable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      manager: string,
      role: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadataBatch(
      tokenIds: BigNumberish[],
      data: {
        origin: BigNumberish;
        parent: BigNumberish;
        expire: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftName(
      nftAddr: string,
      nftTokenId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setlink(
      source: BigNumberish,
      target: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setlinks(
      source: BigNumberish,
      targets: BigNumberish[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRootOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "ConfigUpdated(uint256)"(
      flags?: null
    ): TypedEventFilter<[BigNumber], { flags: BigNumber }>;

    ConfigUpdated(
      flags?: null
    ): TypedEventFilter<[BigNumber], { flags: BigNumber }>;

    "ManagerChanged(address,bool)"(
      manager?: string | null,
      role?: boolean | null
    ): TypedEventFilter<[string, boolean], { manager: string; role: boolean }>;

    ManagerChanged(
      manager?: string | null,
      role?: boolean | null
    ): TypedEventFilter<[string, boolean], { manager: string; role: boolean }>;

    "MetadataUpdated(uint256[])"(
      data?: null
    ): TypedEventFilter<[BigNumber[]], { data: BigNumber[] }>;

    MetadataUpdated(
      data?: null
    ): TypedEventFilter<[BigNumber[]], { data: BigNumber[] }>;

    "NewKey(string,string)"(
      keyIndex?: string | null,
      key?: null
    ): TypedEventFilter<[string, string], { keyIndex: string; key: string }>;

    NewKey(
      keyIndex?: string | null,
      key?: null
    ): TypedEventFilter<[string, string], { keyIndex: string; key: string }>;

    "NewResolver(uint256,address)"(
      tokenId?: null,
      resolver?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; resolver: string }
    >;

    NewResolver(
      tokenId?: null,
      resolver?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; resolver: string }
    >;

    "NewSubdomain(address,uint256,uint256,string)"(
      to?: null,
      tokenId?: null,
      subtokenId?: null,
      name?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { to: string; tokenId: BigNumber; subtokenId: BigNumber; name: string }
    >;

    NewSubdomain(
      to?: null,
      tokenId?: null,
      subtokenId?: null,
      name?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { to: string; tokenId: BigNumber; subtokenId: BigNumber; name: string }
    >;

    "ResetRecords(uint256)"(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    ResetRecords(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    "RootOwnershipTransferred(address,address)"(
      oldRoot?: string | null,
      newRoot?: string | null
    ): TypedEventFilter<[string, string], { oldRoot: string; newRoot: string }>;

    RootOwnershipTransferred(
      oldRoot?: string | null,
      newRoot?: string | null
    ): TypedEventFilter<[string, string], { oldRoot: string; newRoot: string }>;

    "Set(uint256,uint256,string)"(
      tokenId?: BigNumberish | null,
      keyHash?: BigNumberish | null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; keyHash: BigNumber; value: string }
    >;

    Set(
      tokenId?: BigNumberish | null,
      keyHash?: BigNumberish | null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; keyHash: BigNumber; value: string }
    >;

    "SetLink(uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      keyHash?: BigNumberish | null,
      value?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { tokenId: BigNumber; keyHash: BigNumber; value: BigNumber }
    >;

    SetLink(
      tokenId?: BigNumberish | null,
      keyHash?: BigNumberish | null,
      value?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { tokenId: BigNumber; keyHash: BigNumber; value: BigNumber }
    >;

    "SetName(address,uint256)"(
      addr?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { addr: string; tokenId: BigNumber }
    >;

    SetName(
      addr?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { addr: string; tokenId: BigNumber }
    >;

    "SetNftName(address,uint256,uint256)"(
      nftAddr?: string | null,
      nftTokenId?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { nftAddr: string; nftTokenId: BigNumber; tokenId: BigNumber }
    >;

    SetNftName(
      nftAddr?: string | null,
      nftTokenId?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { nftAddr: string; nftTokenId: BigNumber; tokenId: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    FLAGS(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _root(overrides?: CallOverrides): Promise<BigNumber>;

    addKeys(
      keys: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    available(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bound(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bounded(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expire(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(
      key: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getByHash(
      keyHash: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKey(
      keyHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMany(
      keys: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNameUnchecked(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftName(
      nftAddr: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getlink(
      source: BigNumberish,
      target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getlinks(
      source: BigNumberish,
      targets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedOrOwner(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isManager(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      newTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintSubdomain(
      to: string,
      tokenId: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nameExpired(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    origin(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parent(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      name: string,
      to: string,
      duration: BigNumberish,
      baseNode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renew(
      id: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractConfig(
      _writable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      manager: string,
      role: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMetadataBatch(
      tokenIds: BigNumberish[],
      data: {
        origin: BigNumberish;
        parent: BigNumberish;
        expire: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setName(
      addr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftName(
      nftAddr: string,
      nftTokenId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setlink(
      source: BigNumberish,
      target: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setlinks(
      source: BigNumberish,
      targets: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferRootOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FLAGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addKeys(
      keys: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    available(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bound(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bounded(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expire(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      key: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getByHash(
      keyHash: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKey(
      keyHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMany(
      keys: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNameUnchecked(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftName(
      nftAddr: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getlink(
      source: BigNumberish,
      target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getlinks(
      source: BigNumberish,
      targets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedOrOwner(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isManager(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      newTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintSubdomain(
      to: string,
      tokenId: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nameExpired(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    origin(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parent(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      name: string,
      to: string,
      duration: BigNumberish,
      baseNode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renew(
      id: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractConfig(
      _writable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      manager: string,
      role: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMetadataBatch(
      tokenIds: BigNumberish[],
      data: {
        origin: BigNumberish;
        parent: BigNumberish;
        expire: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      addr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftName(
      nftAddr: string,
      nftTokenId: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setlink(
      source: BigNumberish,
      target: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setlinks(
      source: BigNumberish,
      targets: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferRootOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
