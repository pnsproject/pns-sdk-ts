/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ControllerInterface extends ethers.utils.Interface {
  functions: {
    "BASE_NODE()": FunctionFragment;
    "FLAGS()": FunctionFragment;
    "MIN_REGISTRATION_DURATION()": FunctionFragment;
    "MIN_REGISTRATION_LENGTH()": FunctionFragment;
    "_pns()": FunctionFragment;
    "basePrice(string)": FunctionFragment;
    "getPrices()": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "nameRedeem(string,address,uint64,uint256,bytes)": FunctionFragment;
    "nameRegister(string,address,uint64)": FunctionFragment;
    "nameRegisterByManager(string,address,uint64,uint256,uint256[],string[])": FunctionFragment;
    "nameRegisterWithConfig(string,address,uint64,uint256,uint256[],string[])": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "recoverKey(bytes32,bytes)": FunctionFragment;
    "renew(string,uint64)": FunctionFragment;
    "renewByManager(string,uint64)": FunctionFragment;
    "renewPrice(string,uint64)": FunctionFragment;
    "rentPrice(string,uint64)": FunctionFragment;
    "root()": FunctionFragment;
    "setContractConfig(uint256,uint256,uint64,address)": FunctionFragment;
    "setManager(address,bool)": FunctionFragment;
    "setPrices(uint256[],uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalRegisterPrice(string,uint64)": FunctionFragment;
    "transferRootOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE_NODE", values?: undefined): string;
  encodeFunctionData(functionFragment: "FLAGS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_REGISTRATION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REGISTRATION_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_pns", values?: undefined): string;
  encodeFunctionData(functionFragment: "basePrice", values: [string]): string;
  encodeFunctionData(functionFragment: "getPrices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRedeem",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRegister",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRegisterByManager",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRegisterWithConfig",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      string[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverKey",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewByManager",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContractConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRegisterPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRootOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_NODE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FLAGS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REGISTRATION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REGISTRATION_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_pns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "basePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nameRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameRegisterByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameRegisterWithConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rentPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRegisterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRootOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CapacityUpdated(uint256,uint256)": EventFragment;
    "ConfigUpdated(uint256)": EventFragment;
    "ManagerChanged(address,bool)": EventFragment;
    "NameRegistered(address,uint256,uint256,uint256,string)": EventFragment;
    "NameRenewed(uint256,uint256,uint256,string)": EventFragment;
    "PriceChanged(uint256[],uint256[])": EventFragment;
    "RootOwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CapacityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootOwnershipTransferred"): EventFragment;
}

export type CapacityUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokenId: BigNumber; capacity: BigNumber }
>;

export type ConfigUpdatedEvent = TypedEvent<[BigNumber] & { flags: BigNumber }>;

export type ManagerChangedEvent = TypedEvent<
  [string, boolean] & { manager: string; role: boolean }
>;

export type NameRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string] & {
    to: string;
    node: BigNumber;
    cost: BigNumber;
    expires: BigNumber;
    name: string;
  }
>;

export type NameRenewedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string] & {
    node: BigNumber;
    cost: BigNumber;
    expires: BigNumber;
    name: string;
  }
>;

export type PriceChangedEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    basePrices: BigNumber[];
    rentPrices: BigNumber[];
  }
>;

export type RootOwnershipTransferredEvent = TypedEvent<
  [string, string] & { oldRoot: string; newRoot: string }
>;

export class Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ControllerInterface;

  functions: {
    BASE_NODE(overrides?: CallOverrides): Promise<[BigNumber]>;

    FLAGS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_REGISTRATION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_REGISTRATION_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    _pns(overrides?: CallOverrides): Promise<[string]>;

    basePrice(name: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrices(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    isManager(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameRedeem(
      name: string,
      to: string,
      duration: BigNumberish,
      deadline: BigNumberish,
      code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameRegister(
      name: string,
      to: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameRegisterByManager(
      name: string,
      to: string,
      duration: BigNumberish,
      data: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameRegisterWithConfig(
      name: string,
      to: string,
      duration: BigNumberish,
      data: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    recoverKey(
      datahash: BytesLike,
      code: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewByManager(
      name: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rentPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    root(overrides?: CallOverrides): Promise<[string]>;

    setContractConfig(
      _flags: BigNumberish,
      _min_length: BigNumberish,
      _min_duration: BigNumberish,
      _price_feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      manager: string,
      role: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrices(
      _basePrices: BigNumberish[],
      _rentPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalRegisterPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferRootOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_NODE(overrides?: CallOverrides): Promise<BigNumber>;

  FLAGS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_REGISTRATION_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  _pns(overrides?: CallOverrides): Promise<string>;

  basePrice(name: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPrices(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  isManager(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameRedeem(
    name: string,
    to: string,
    duration: BigNumberish,
    deadline: BigNumberish,
    code: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameRegister(
    name: string,
    to: string,
    duration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameRegisterByManager(
    name: string,
    to: string,
    duration: BigNumberish,
    data: BigNumberish,
    keyHashes: BigNumberish[],
    values: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameRegisterWithConfig(
    name: string,
    to: string,
    duration: BigNumberish,
    data: BigNumberish,
    keyHashes: BigNumberish[],
    values: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  recoverKey(
    datahash: BytesLike,
    code: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  renew(
    name: string,
    duration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewByManager(
    name: string,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewPrice(
    name: string,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rentPrice(
    name: string,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  root(overrides?: CallOverrides): Promise<string>;

  setContractConfig(
    _flags: BigNumberish,
    _min_length: BigNumberish,
    _min_duration: BigNumberish,
    _price_feed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    manager: string,
    role: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrices(
    _basePrices: BigNumberish[],
    _rentPrices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalRegisterPrice(
    name: string,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferRootOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_NODE(overrides?: CallOverrides): Promise<BigNumber>;

    FLAGS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REGISTRATION_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    _pns(overrides?: CallOverrides): Promise<string>;

    basePrice(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrices(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isManager(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    nameRedeem(
      name: string,
      to: string,
      duration: BigNumberish,
      deadline: BigNumberish,
      code: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameRegister(
      name: string,
      to: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameRegisterByManager(
      name: string,
      to: string,
      duration: BigNumberish,
      data: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameRegisterWithConfig(
      name: string,
      to: string,
      duration: BigNumberish,
      data: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    recoverKey(
      datahash: BytesLike,
      code: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renewByManager(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renewPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<string>;

    setContractConfig(
      _flags: BigNumberish,
      _min_length: BigNumberish,
      _min_duration: BigNumberish,
      _price_feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      manager: string,
      role: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      _basePrices: BigNumberish[],
      _rentPrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalRegisterPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferRootOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CapacityUpdated(uint256,uint256)"(
      tokenId?: null,
      capacity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; capacity: BigNumber }
    >;

    CapacityUpdated(
      tokenId?: null,
      capacity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; capacity: BigNumber }
    >;

    "ConfigUpdated(uint256)"(
      flags?: null
    ): TypedEventFilter<[BigNumber], { flags: BigNumber }>;

    ConfigUpdated(
      flags?: null
    ): TypedEventFilter<[BigNumber], { flags: BigNumber }>;

    "ManagerChanged(address,bool)"(
      manager?: string | null,
      role?: boolean | null
    ): TypedEventFilter<[string, boolean], { manager: string; role: boolean }>;

    ManagerChanged(
      manager?: string | null,
      role?: boolean | null
    ): TypedEventFilter<[string, boolean], { manager: string; role: boolean }>;

    "NameRegistered(address,uint256,uint256,uint256,string)"(
      to?: null,
      node?: null,
      cost?: null,
      expires?: null,
      name?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        to: string;
        node: BigNumber;
        cost: BigNumber;
        expires: BigNumber;
        name: string;
      }
    >;

    NameRegistered(
      to?: null,
      node?: null,
      cost?: null,
      expires?: null,
      name?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        to: string;
        node: BigNumber;
        cost: BigNumber;
        expires: BigNumber;
        name: string;
      }
    >;

    "NameRenewed(uint256,uint256,uint256,string)"(
      node?: null,
      cost?: null,
      expires?: null,
      name?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      { node: BigNumber; cost: BigNumber; expires: BigNumber; name: string }
    >;

    NameRenewed(
      node?: null,
      cost?: null,
      expires?: null,
      name?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      { node: BigNumber; cost: BigNumber; expires: BigNumber; name: string }
    >;

    "PriceChanged(uint256[],uint256[])"(
      basePrices?: null,
      rentPrices?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { basePrices: BigNumber[]; rentPrices: BigNumber[] }
    >;

    PriceChanged(
      basePrices?: null,
      rentPrices?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { basePrices: BigNumber[]; rentPrices: BigNumber[] }
    >;

    "RootOwnershipTransferred(address,address)"(
      oldRoot?: string | null,
      newRoot?: string | null
    ): TypedEventFilter<[string, string], { oldRoot: string; newRoot: string }>;

    RootOwnershipTransferred(
      oldRoot?: string | null,
      newRoot?: string | null
    ): TypedEventFilter<[string, string], { oldRoot: string; newRoot: string }>;
  };

  estimateGas: {
    BASE_NODE(overrides?: CallOverrides): Promise<BigNumber>;

    FLAGS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REGISTRATION_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    _pns(overrides?: CallOverrides): Promise<BigNumber>;

    basePrice(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrices(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isManager(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameRedeem(
      name: string,
      to: string,
      duration: BigNumberish,
      deadline: BigNumberish,
      code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameRegister(
      name: string,
      to: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameRegisterByManager(
      name: string,
      to: string,
      duration: BigNumberish,
      data: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameRegisterWithConfig(
      name: string,
      to: string,
      duration: BigNumberish,
      data: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    recoverKey(
      datahash: BytesLike,
      code: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewByManager(
      name: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    setContractConfig(
      _flags: BigNumberish,
      _min_length: BigNumberish,
      _min_duration: BigNumberish,
      _price_feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      manager: string,
      role: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrices(
      _basePrices: BigNumberish[],
      _rentPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRegisterPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferRootOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_NODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FLAGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_REGISTRATION_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_REGISTRATION_LENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _pns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basePrice(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isManager(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameRedeem(
      name: string,
      to: string,
      duration: BigNumberish,
      deadline: BigNumberish,
      code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameRegister(
      name: string,
      to: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameRegisterByManager(
      name: string,
      to: string,
      duration: BigNumberish,
      data: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameRegisterWithConfig(
      name: string,
      to: string,
      duration: BigNumberish,
      data: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverKey(
      datahash: BytesLike,
      code: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewByManager(
      name: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rentPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setContractConfig(
      _flags: BigNumberish,
      _min_length: BigNumberish,
      _min_duration: BigNumberish,
      _price_feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      manager: string,
      role: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrices(
      _basePrices: BigNumberish[],
      _rentPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRegisterPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferRootOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
