/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IResolverInterface extends ethers.utils.Interface {
  functions: {
    "addKey(string)": FunctionFragment;
    "addKeys(string[])": FunctionFragment;
    "get(string,uint256)": FunctionFragment;
    "getByHash(uint256,uint256)": FunctionFragment;
    "getKey(uint256)": FunctionFragment;
    "getKeys(uint256[])": FunctionFragment;
    "getMany(string[],uint256)": FunctionFragment;
    "getManyByHash(uint256[],uint256)": FunctionFragment;
    "getName(address)": FunctionFragment;
    "getNftName(address,uint256)": FunctionFragment;
    "set(string,string,uint256)": FunctionFragment;
    "setByHash(uint256,string,uint256)": FunctionFragment;
    "setMany(string[],string[],uint256)": FunctionFragment;
    "setManyByHash(uint256[],string[],uint256)": FunctionFragment;
    "setName(uint256)": FunctionFragment;
    "setNftName(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addKey", values: [string]): string;
  encodeFunctionData(functionFragment: "addKeys", values: [string[]]): string;
  encodeFunctionData(functionFragment: "get", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getByHash", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getKey", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getKeys", values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "getMany", values: [string[], BigNumberish]): string;
  encodeFunctionData(functionFragment: "getManyByHash", values: [BigNumberish[], BigNumberish]): string;
  encodeFunctionData(functionFragment: "getName", values: [string]): string;
  encodeFunctionData(functionFragment: "getNftName", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "set", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "setByHash", values: [BigNumberish, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "setMany", values: [string[], string[], BigNumberish]): string;
  encodeFunctionData(functionFragment: "setManyByHash", values: [BigNumberish[], string[], BigNumberish]): string;
  encodeFunctionData(functionFragment: "setName", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setNftName", values: [string, BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMany", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getManyByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNftName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMany", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManyByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNftName", data: BytesLike): Result;

  events: {
    "NewKey(uint256,string,string)": EventFragment;
    "ResetRecords(uint256)": EventFragment;
    "Set(uint256,string,string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetRecords"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
}

export type NewKeyEvent = TypedEvent<
  [BigNumber, string, string] & {
    tokenId: BigNumber;
    keyIndex: string;
    key: string;
  }
>;

export type ResetRecordsEvent = TypedEvent<[BigNumber] & { tokenId: BigNumber }>;

export type SetEvent = TypedEvent<
  [BigNumber, string, string, string, string] & {
    tokenId: BigNumber;
    keyIndex: string;
    valueIndex: string;
    key: string;
    value: string;
  }
>;

export class IResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IResolverInterface;

  functions: {
    addKey(key: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    addKeys(keys: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    get(key: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getByHash(keyHash: BigNumberish, tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string, string] & { key: string; value: string }>;

    getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getKeys(hashes: BigNumberish[], overrides?: CallOverrides): Promise<[string[]] & { values: string[] }>;

    getMany(keys: string[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string[]]>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

    getName(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getNftName(nftAddr: string, nftTokenId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    set(key: string, value: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMany(keys: string[], values: string[], tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setName(tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setNftName(
      nft: string,
      nftTokenId: BigNumberish,
      nameTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addKey(key: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  addKeys(keys: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  get(key: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getByHash(keyHash: BigNumberish, tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string, string] & { key: string; value: string }>;

  getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getKeys(hashes: BigNumberish[], overrides?: CallOverrides): Promise<string[]>;

  getMany(keys: string[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  getManyByHash(
    keyHashes: BigNumberish[],
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

  getName(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNftName(nftAddr: string, nftTokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  set(key: string, value: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setByHash(
    keyHash: BigNumberish,
    value: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMany(keys: string[], values: string[], tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setManyByHash(
    keyHashes: BigNumberish[],
    values: string[],
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setName(tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setNftName(
    nft: string,
    nftTokenId: BigNumberish,
    nameTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addKey(key: string, overrides?: CallOverrides): Promise<void>;

    addKeys(keys: string[], overrides?: CallOverrides): Promise<void>;

    get(key: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getByHash(keyHash: BigNumberish, tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string, string] & { key: string; value: string }>;

    getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getKeys(hashes: BigNumberish[], overrides?: CallOverrides): Promise<string[]>;

    getMany(keys: string[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

    getName(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNftName(nftAddr: string, nftTokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    set(key: string, value: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setByHash(keyHash: BigNumberish, value: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMany(keys: string[], values: string[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setManyByHash(keyHashes: BigNumberish[], values: string[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setName(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNftName(nft: string, nftTokenId: BigNumberish, nameTokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewKey(uint256,string,string)"(
      tokenId?: BigNumberish | null,
      keyIndex?: string | null,
      key?: null
    ): TypedEventFilter<[BigNumber, string, string], { tokenId: BigNumber; keyIndex: string; key: string }>;

    NewKey(
      tokenId?: BigNumberish | null,
      keyIndex?: string | null,
      key?: null
    ): TypedEventFilter<[BigNumber, string, string], { tokenId: BigNumber; keyIndex: string; key: string }>;

    "ResetRecords(uint256)"(tokenId?: BigNumberish | null): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    ResetRecords(tokenId?: BigNumberish | null): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    "Set(uint256,string,string,string,string)"(
      tokenId?: BigNumberish | null,
      keyIndex?: string | null,
      valueIndex?: string | null,
      key?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        tokenId: BigNumber;
        keyIndex: string;
        valueIndex: string;
        key: string;
        value: string;
      }
    >;

    Set(
      tokenId?: BigNumberish | null,
      keyIndex?: string | null,
      valueIndex?: string | null,
      key?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        tokenId: BigNumber;
        keyIndex: string;
        valueIndex: string;
        key: string;
        value: string;
      }
    >;
  };

  estimateGas: {
    addKey(key: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addKeys(keys: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    get(key: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getByHash(keyHash: BigNumberish, tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getKeys(hashes: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    getMany(keys: string[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getManyByHash(keyHashes: BigNumberish[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getName(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNftName(nftAddr: string, nftTokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    set(key: string, value: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setByHash(keyHash: BigNumberish, value: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setMany(keys: string[], values: string[], tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setName(tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setNftName(
      nft: string,
      nftTokenId: BigNumberish,
      nameTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKey(key: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    addKeys(keys: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    get(key: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getByHash(keyHash: BigNumberish, tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeys(hashes: BigNumberish[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMany(keys: string[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getManyByHash(keyHashes: BigNumberish[], tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftName(nftAddr: string, nftTokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(key: string, value: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMany(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setName(tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setNftName(
      nft: string,
      nftTokenId: BigNumberish,
      nameTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
