/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IControllerInterface extends ethers.utils.Interface {
  functions: {
    "available(uint256)": FunctionFragment;
    "basePrice(string)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "getPrices()": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "mintSubdomain(address,uint256,string)": FunctionFragment;
    "nameRecord(uint256)": FunctionFragment;
    "nameRedeem(string,address,uint256,bytes)": FunctionFragment;
    "nameRegister(string,address,uint256)": FunctionFragment;
    "nameRegisterByManager(string,address,uint256)": FunctionFragment;
    "nameRegisterWithConfig(string,address,uint256,uint256[],string[])": FunctionFragment;
    "renew(string,uint256)": FunctionFragment;
    "renewByManager(string,uint256)": FunctionFragment;
    "renewPrice(string,uint256)": FunctionFragment;
    "rentPrice(string,uint256)": FunctionFragment;
    "setCapacity(uint256,uint256)": FunctionFragment;
    "setCapacityByManager(uint256,uint256)": FunctionFragment;
    "setPrices(uint256[],uint256[])": FunctionFragment;
    "totalRegisterPrice(string,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "available",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "basePrice", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getPrices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintSubdomain",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRedeem",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRegister",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRegisterByManager",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRegisterWithConfig",
    values: [string, string, BigNumberish, BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewByManager",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCapacity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCapacityByManager",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRegisterPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "basePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSubdomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nameRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nameRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameRegisterByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameRegisterWithConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rentPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCapacityByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRegisterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CapacityUpdated(uint256,uint256)": EventFragment;
    "ConfigUpdated(uint256)": EventFragment;
    "MetadataUpdated(uint256[])": EventFragment;
    "NameRegistered(address,uint256,uint256,uint256,string)": EventFragment;
    "NameRenewed(uint256,uint256,uint256,string)": EventFragment;
    "NewSubdomain(address,uint256,uint256,string)": EventFragment;
    "PriceChanged(uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CapacityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSubdomain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceChanged"): EventFragment;
}

export type CapacityUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokenId: BigNumber; capacity: BigNumber }
>;

export type ConfigUpdatedEvent = TypedEvent<[BigNumber] & { flags: BigNumber }>;

export type MetadataUpdatedEvent = TypedEvent<
  [BigNumber[]] & { data: BigNumber[] }
>;

export type NameRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string] & {
    to: string;
    node: BigNumber;
    cost: BigNumber;
    expires: BigNumber;
    name: string;
  }
>;

export type NameRenewedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string] & {
    node: BigNumber;
    cost: BigNumber;
    expires: BigNumber;
    name: string;
  }
>;

export type NewSubdomainEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    to: string;
    parent: BigNumber;
    node: BigNumber;
    name: string;
  }
>;

export type PriceChangedEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    basePrices: BigNumber[];
    rentPrices: BigNumber[];
  }
>;

export class IController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IControllerInterface;

  functions: {
    available(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    basePrice(name: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPrices(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintSubdomain(
      to: string,
      tokenId: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          origin: BigNumber;
          expire: BigNumber;
          capacity: BigNumber;
          children: BigNumber;
        }
      ]
    >;

    nameRedeem(
      name: string,
      owner: string,
      duration: BigNumberish,
      code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameRegister(
      name: string,
      owner: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameRegisterByManager(
      name: string,
      owner: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameRegisterWithConfig(
      name: string,
      owner: string,
      duration: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewByManager(
      name: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rentPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setCapacity(
      tokenId: BigNumberish,
      _capacity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCapacityByManager(
      tokenId: BigNumberish,
      _capacity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrices(
      basePrices: BigNumberish[],
      rentPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalRegisterPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  available(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  basePrice(name: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPrices(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  mintSubdomain(
    to: string,
    tokenId: BigNumberish,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameRecord(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      origin: BigNumber;
      expire: BigNumber;
      capacity: BigNumber;
      children: BigNumber;
    }
  >;

  nameRedeem(
    name: string,
    owner: string,
    duration: BigNumberish,
    code: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameRegister(
    name: string,
    owner: string,
    duration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameRegisterByManager(
    name: string,
    owner: string,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameRegisterWithConfig(
    name: string,
    owner: string,
    duration: BigNumberish,
    keyHashes: BigNumberish[],
    values: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renew(
    name: string,
    duration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewByManager(
    name: string,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewPrice(
    name: string,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rentPrice(
    name: string,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCapacity(
    tokenId: BigNumberish,
    _capacity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCapacityByManager(
    tokenId: BigNumberish,
    _capacity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrices(
    basePrices: BigNumberish[],
    rentPrices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalRegisterPrice(
    name: string,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    available(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    basePrice(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getPrices(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintSubdomain(
      to: string,
      tokenId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nameRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        origin: BigNumber;
        expire: BigNumber;
        capacity: BigNumber;
        children: BigNumber;
      }
    >;

    nameRedeem(
      name: string,
      owner: string,
      duration: BigNumberish,
      code: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameRegister(
      name: string,
      owner: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameRegisterByManager(
      name: string,
      owner: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameRegisterWithConfig(
      name: string,
      owner: string,
      duration: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renewByManager(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renewPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCapacity(
      tokenId: BigNumberish,
      _capacity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCapacityByManager(
      tokenId: BigNumberish,
      _capacity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      basePrices: BigNumberish[],
      rentPrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    totalRegisterPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CapacityUpdated(uint256,uint256)"(
      tokenId?: null,
      capacity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; capacity: BigNumber }
    >;

    CapacityUpdated(
      tokenId?: null,
      capacity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; capacity: BigNumber }
    >;

    "ConfigUpdated(uint256)"(
      flags?: null
    ): TypedEventFilter<[BigNumber], { flags: BigNumber }>;

    ConfigUpdated(
      flags?: null
    ): TypedEventFilter<[BigNumber], { flags: BigNumber }>;

    "MetadataUpdated(uint256[])"(
      data?: null
    ): TypedEventFilter<[BigNumber[]], { data: BigNumber[] }>;

    MetadataUpdated(
      data?: null
    ): TypedEventFilter<[BigNumber[]], { data: BigNumber[] }>;

    "NameRegistered(address,uint256,uint256,uint256,string)"(
      to?: null,
      node?: null,
      cost?: null,
      expires?: null,
      name?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        to: string;
        node: BigNumber;
        cost: BigNumber;
        expires: BigNumber;
        name: string;
      }
    >;

    NameRegistered(
      to?: null,
      node?: null,
      cost?: null,
      expires?: null,
      name?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        to: string;
        node: BigNumber;
        cost: BigNumber;
        expires: BigNumber;
        name: string;
      }
    >;

    "NameRenewed(uint256,uint256,uint256,string)"(
      node?: null,
      cost?: null,
      expires?: null,
      name?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      { node: BigNumber; cost: BigNumber; expires: BigNumber; name: string }
    >;

    NameRenewed(
      node?: null,
      cost?: null,
      expires?: null,
      name?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      { node: BigNumber; cost: BigNumber; expires: BigNumber; name: string }
    >;

    "NewSubdomain(address,uint256,uint256,string)"(
      to?: null,
      parent?: null,
      node?: null,
      name?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { to: string; parent: BigNumber; node: BigNumber; name: string }
    >;

    NewSubdomain(
      to?: null,
      parent?: null,
      node?: null,
      name?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { to: string; parent: BigNumber; node: BigNumber; name: string }
    >;

    "PriceChanged(uint256[],uint256[])"(
      basePrices?: null,
      rentPrices?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { basePrices: BigNumber[]; rentPrices: BigNumber[] }
    >;

    PriceChanged(
      basePrices?: null,
      rentPrices?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { basePrices: BigNumber[]; rentPrices: BigNumber[] }
    >;
  };

  estimateGas: {
    available(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    basePrice(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPrices(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintSubdomain(
      to: string,
      tokenId: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameRedeem(
      name: string,
      owner: string,
      duration: BigNumberish,
      code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameRegister(
      name: string,
      owner: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameRegisterByManager(
      name: string,
      owner: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameRegisterWithConfig(
      name: string,
      owner: string,
      duration: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewByManager(
      name: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCapacity(
      tokenId: BigNumberish,
      _capacity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCapacityByManager(
      tokenId: BigNumberish,
      _capacity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrices(
      basePrices: BigNumberish[],
      rentPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalRegisterPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    available(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basePrice(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPrices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintSubdomain(
      to: string,
      tokenId: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nameRedeem(
      name: string,
      owner: string,
      duration: BigNumberish,
      code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameRegister(
      name: string,
      owner: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameRegisterByManager(
      name: string,
      owner: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameRegisterWithConfig(
      name: string,
      owner: string,
      duration: BigNumberish,
      keyHashes: BigNumberish[],
      values: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewByManager(
      name: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rentPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCapacity(
      tokenId: BigNumberish,
      _capacity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCapacityByManager(
      tokenId: BigNumberish,
      _capacity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrices(
      basePrices: BigNumberish[],
      rentPrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalRegisterPrice(
      name: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
